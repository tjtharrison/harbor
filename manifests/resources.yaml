---
# Source: harbor/charts/harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prod-harbor-core
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "YURDSXNjTlBkSmhOZ2hWZA=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNGJEZlovMi9LUisxZmtUL1BpM04veDNmeUtuMzZSTmZuU0w0bzVCUytjU0p2czdZCmpCWnlmeEV2dEN5RWFrU29wWklDWWhGSWgzaVlkaGwwZy9oQmNTek1VeWRuTUgzOUtEemZIbVNTUWJ3ald4eG4KYkVOT3Q4WnNBWnBvVnU4c2M5cVY5RFZQZ3BXQnRqN3NkUXJJTWxFRVpVNHNrSWoyOHFURnVXeWFZcHNUcGJ4RwpZZkpYdStDTFgxRy9xQjJkTzFoUWxwcllraWFiNEhHeGVUaFF3eWhBbjkyZW0yK2Jxd2ZwZVRXVWJtczlZT296CndXSms0eEVXS3hlK3Z2c1BwQW1mRGJGZTRuZEJGbUhFb1RiUTZ5TndyOUV4dlE0cmlueWpkTFlrMEQvV1VtSzkKZTlXL1d5bERrWG9yb0tpb3pkY3NzVHZDWklLUVVpSU9WdWkycFFJREFRQUJBb0lCQUFDTWM1T2lDTndJL3dPVgphTGs1bW9zc0szaTZneWNWdlNFdmMwTXQ1VzFTSFpHMll1aDdiaDUwcElESUdRY21YbXVqSlJJRnY4azYxa3N6Cm43RkJZaUsySTI1SUc0NUVrZEtiekIyVTlPYXh6QVZDTk9SQzlQNkJSTklOT3RSd3Z0TXVpWWpJZnV0MWpvZSsKMVdubUtXUExaYTFrR3NqL1g1dVNjdDF4VWF1WjVwU213UWovUWN4VUgxYU1hNm1UYXFlRVBrcmpUUktSNS83bQpXbEVPZXo1WjlHUXBmZFliMmFoZmhKV0FEUXRpMWNxMHhiS0trenVZbVRnUDQvOG83OS9oMnhjOFRibUZMNEtuCmZma25HdC9nQ0tzWmhsSG4rMTVLYjJvblhCTnRkMHRJWEkwL2IxN1kwK1Q3RXI2N0JvN2ExcmpGclVEMCtCZkcKQmM5RDl1RUNnWUVBN1RrUGNteUF1cHQ5cXpYNXlNUDI0akE0bjNJZ1A2VlVlYmRMZW82T2hLc3BjL0xoY1VHYgpQaDBJSS8yeU0zYVJ1UlFsREp2TFRqQkJ5dVZMbnZ1VFJLQnlHbUlvYXRSbHg4YVF4c3h2bEZFR1Qzbk5MSzRBCnVDeGhYNUUzOGkwbGI1aWxvZmxXeHZCTjBiM1F3YUhRN095SUNhYVNlcWJaK1cxdEZKYWVBbjBDZ1lFQTg0NGkKb2g5dDk4YnpzUDNXcHlVNnZoeGZMSk4vcHBSTzBHLzMzQVUwaFZKZXNlNjNnYzNiMkQrU2ZROUJZZ3E3ek1FVQpyY29SWjV6V25GU3MwbzFpdjNiZnlVZklYSjJQOGRTczRyOHIxWFMyQWpaTUtYNWZOcmJNMVNybGJnS2xDaG1hCjNqc052K1NUalFkTmdIZjY5YXAxOVpNeWFpaUp1YVNyVTkxbzFVa0NnWUI5WFN4R29nU2RtVktlU2xZSXZWY1oKVGJaK3ZNZENHMU03UjV5QjFoaUhFQlZHQzFNTWtVbERXQUJYVk5qNXpXMVJTODRRamJ5eFExdGhxQytBZ3g3ZQpvNVBwVVhwZWlvU0hRTzU5d01ndXIyc1FVU1FXdXBYeXZyRnUyY1doSEM2dWZSTDdPRk9kcXB6VmZPUjNqOVpqCmZ0U2RsUVBRQWFFcjZhSTl3U01iMlFLQmdRQ0NQTjVPUFdwTGxnclgrVlVnZWlzSVlCbVF0NnNLQThLRmVXcGMKTURoZWxxWm1sWlZ4aHdocGdjMHVyTXEweDdLWEVpU2hyaTFTYjY3ZlYvUTJmejV2emZ4cklNU0dxZ2JBTlk3aApqWUsrR1RQK3lOUS9XQUZJTzhZYXMxNk9Ua0c4dmVadnNicHZnNlpYUXJGeDRqYkR5WXhjYm9NRiszbHlXUmo0CnRxd0phUUtCZ1FDVzdVOEtlQ001eWZDYXNWMllVNVlDTU9lZWZ5L0RXTUdTWXgyM2JOZ3VJS3JBVzRtUVNVUGsKb2RLeWc0RTI4SWJ5SktjTHlnRk9qUU9FMHYzSEsvNFJyLytlZSs2eFQwWjEyVlJnVExGUFlZV0FsWStaaDRMOQpNL1hiY0lvL0p3UFdGUEllOGR1dXdUNEpueFVMQVYrUlNBTFVrSHFhSE05VFpwVVJnMXBaemc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQUxicHYyR0d4VGNiMUdueTZqQ2RBYUV3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSTFNRGN5TXpFeE5ETXdNVm9YRFRJMgpNRGN5TXpFeE5ETXdNVm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNGJEZlovMi9LUisxZmtUL1BpM04veDNmeUtuMzZSTmYKblNMNG81QlMrY1NKdnM3WWpCWnlmeEV2dEN5RWFrU29wWklDWWhGSWgzaVlkaGwwZy9oQmNTek1VeWRuTUgzOQpLRHpmSG1TU1Fid2pXeHhuYkVOT3Q4WnNBWnBvVnU4c2M5cVY5RFZQZ3BXQnRqN3NkUXJJTWxFRVpVNHNrSWoyCjhxVEZ1V3lhWXBzVHBieEdZZkpYdStDTFgxRy9xQjJkTzFoUWxwcllraWFiNEhHeGVUaFF3eWhBbjkyZW0yK2IKcXdmcGVUV1VibXM5WU9vendXSms0eEVXS3hlK3Z2c1BwQW1mRGJGZTRuZEJGbUhFb1RiUTZ5TndyOUV4dlE0cgppbnlqZExZazBEL1dVbUs5ZTlXL1d5bERrWG9yb0tpb3pkY3NzVHZDWklLUVVpSU9WdWkycFFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkQwVWQzcTBxNUlIUnE0Q0ZLNVdOQnFkbTlOMQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURGVUVpL05iKy9GSi9nTU9XaFgxOHN5bjNoZlFtQU14Y0t6L0R0CnZTYnRvM0gzQ3pzOWJ6NU1XeUZzMUFKak5vbEV0M2tqb1RaTGdyODNHSE5pS3duM2tJNTlzbGtUWGhBS0RVNm8KaFM3VUsrN1k5bThBN2t4UW5adlJ2VXhuRGNDUUhNL2kybG12UFdaYkROaTh0NWpESXhVS3NWdVplbWhDTHJoWQp0NEdvbDdiM0JFNkh0SmdFWVI2YmFoMWpYMVB4M2phTnc4S09CY2pWd1QwaG02TFp2MVE2QVRGTm1hNTR2a3hkCitxVFl5eDB0R0MveTBnVDY4OWhiQkFzRTlpa21rZ1FNMnJlb3BoZDdBb0VpTFJvc2lsRVpya3JIUzllUkpxL0EKZTArMVErSXZkSldHWEN2RTBSNXVsNnhjMTVFemV4ekxOWk1CMk9kc0dDNG1FVVg1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "Zm1qUExQSTc2OUN2b2ZLT1dHYzQwT1ZTU25iVlFsM0U="
---
# Source: harbor/charts/harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prod-harbor-ingress"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMRENDQWhTZ0F3SUJBZ0lRRWMrYlFZMkRHTlZYcEhKeDBjS21iekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalV3TnpJek1URTBNekF3V2hjTk1qWXdOekl6TVRFMApNekF3V2pBV01SUXdFZ1lEVlFRREV3dHZZMmt1ZEdwMGFDNWpiekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTktmQU0xU1F1bXhIbUpwc3A2RWM1L3VKNktya2IrUDQxUjV3VE1zK2tJdlc3eWkKTVFZMFlTWGtHQUd1ZnNEbmJjY1pObUVydmFLOVZZclRJcXovd3lBUEx0Z2gvdlFWa0tTdThMMHg0Q0gzSjZkTgpucFp0dURmbUtOcG1wWUdKUXBoTFcydUpZVzRZMmtqcjUySUU4WXYzY1RmMXZuRW45RHRkSjlJV1FlVTJkUDhvCmJjUHBDYTQvS2l0K3BrdGxiYmU1L0JGbzEwODFLekpjOVJUN3FrWVluNEdRSEJYbVFBK2FibzJNbUhMSnpieEgKNTl3bWpZc0VmVk9XNytDUHpQa2cwNmdHR3RUUXd3WTVGUFpXQmViQjNUcWdzRk5Kb3F2VmwvbE9NU21Eb0VSMApmbHRveDZoRHBUQ3YyTWlHUnJhVUlRMjhZclpNKzl5ZUdLQ052OU1DQXdFQUFhTjRNSFl3RGdZRFZSMFBBUUgvCkJBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEUKQWpBQU1COEdBMVVkSXdRWU1CYUFGRVBmNGloNjQzM1RhUWNHeGRtOFhIam91djMrTUJZR0ExVWRFUVFQTUEyQwpDMjlqYVM1MGFuUm9MbU52TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCTmlhNkNVTklSKzZ3c0JXUCt0aEZsCnFpSUxwL2dVc3BuLzB3c1VwcDY4VDh4aWRVcWZ3SXU5SjhTQ2VndTVtdWJ2VzhwdzM3NUgyZ215WVduQkdpL0gKaGkxM040ZWxqUjI1YXdGV0N6TkZabXlWeFlMOWJwNmthTGhaamRvV2Jsd1BZblIreDlQRVV0KzlQRU1XZjhGUAorMTZaNVFZWTRaVzlCOU54bVMxNFRUR2dEc3NkYTNqcFQwalRCTVpNY3MrbXF4UVNqRW9jTm9La001N2RBZkJhCjl0ajUwVTNXYlh6TkNnTjk3emV2N1VrRytiRk1ycFpNM1FrT3ZTVm1UNUtPWWJHZXVkY3ZmNGQ3UDZwNEd1eTQKN2paa1ozNmJ5b29YanI4UEZKLzUweVlsN3NlYVVGUE9xbWJEMFJwTG94RE1WMTk1QkRmLy81MEtsV2o3bWtCYgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMHA4QXpWSkM2YkVlWW1teW5vUnpuKzRub3F1UnY0L2pWSG5CTXl6NlFpOWJ2S0l4CkJqUmhKZVFZQWE1K3dPZHR4eGsyWVN1OW9yMVZpdE1pclAvRElBOHUyQ0grOUJXUXBLN3d2VEhnSWZjbnAwMmUKbG0yNE4rWW8ybWFsZ1lsQ21FdGJhNGxoYmhqYVNPdm5ZZ1R4aS9keE4vVytjU2YwTzEwbjBoWkI1VFowL3lodAp3K2tKcmo4cUszNm1TMlZ0dDduOEVXalhUelVyTWx6MUZQdXFSaGlmZ1pBY0ZlWkFENXB1all5WWNzbk52RWZuCjNDYU5pd1I5VTVidjRJL00rU0RUcUFZYTFORERCamtVOWxZRjVzSGRPcUN3VTBtaXE5V1grVTR4S1lPZ1JIUisKVzJqSHFFT2xNSy9ZeUlaR3RwUWhEYnhpdGt6NzNKNFlvSTIvMHdJREFRQUJBb0lCQUVvSmpiRWZPUmxINHl2cQpCdGwxS3VYdHhDNEpESWRmcjZSSzFuREVYMFp6dWxZeFYzVmNaVWY2Q2J4Um1BbjhjRmo4RW1NUENxN1J5bWV0CjkzTUR4eFlXY0R1V203WTJmRzEvZDIyeVFoeitjZ2g4SHdLM0YvcENaRnI5bVRGVFREOFh3aytuYjhIUlo2NFoKaXZFb1ZyYUNhV0NuK0dWemk0VndwaVpTSDZEUUkvWFhpZXlLNkl4bzZDdUZSZUVFWGlPcFJ2TURvZHdTQSs5OAovOWVabWdDNHU1S28rR3VCYWdYRDVNUFdMNXFaNXJWd0dJWElCSnM1TW1mK3ZES1Z5VXNPSGNiTDZzalhmWjZTCjMyQzNJK2JJT2wxa0ZEQ0JCY3VqRDhET1R1RmVyQTl1ejlCanJMczNqMW5oNTNhNU8wZ001YTR3T25VWWR0UTMKbXRoL0dxa0NnWUVBNzExMmd4Q20zc0tteU82S0loS1NLK1ZkeXNrZnFnS0c2ZHNlRytaWmxGSzFuZlFTTGJ1awpmVXpqVERkYUVUU1JWWWFxV2ZnWWR4UGI1K3VJN3YwcGxRUlR1cG1YaHJKb0FzRFp6ODRWZGRIcm1YSTFXTU96CmN6QWxLb2xtTEk1Zk51bnBLQWVGbHc2SjFzTW1lc3ZmVjNGaVJCUDk1VUtHdXZKYzUrWnM0c3NDZ1lFQTRVSW8KSjRvTTRLWElXR05ReERuSE5EMzlTVnFkWFlJUXpnUmpJY2lMZjdLUGQvNlpJS2lGMURkUDhkK1M3YVU1NU9EcAorc3I4TlpQSHpoVXNBcGlVaXFmbnFlcmhxWmJrRjdmNU8xbUI0VFV0ak9hT2VRVG5FQ3E0aW10bVM5bkZTbmRCCkh2RVExUlNsb3dIVDN4SmRCczJVYnJPWDByZ1E2QzVpajFkOWpoa0NnWUJCVUxTVkFRYzN3OCsxQm5wRTMrSm8KL2ZhQTdpNm91blhML0ZHVDlXQStPKzk1QVcrd2NRSnFlbitQZlk4aklNQURvWEo4aUZsTXJPdVZ0a3l3UWY2Rgp2aCtHeklCdmJlRTUxeHZZTzNqWnBJVndZcHl4OHZ6VmtxNmhrOHFBbi96VlJEQ3VEcGRpWjhJdkN5TkY0TG01CjU2T1R4Z3pDOFV0SVdmZ0dBM2QwendLQmdIMFI0b0d4b056S3I2YUQza0JWWkVtWmNaemM5eXNJSUpTQzB4ZmEKNWJtTlJ5TjA5VWl3eVQyL1NHQWZwdERVUUlUWWJKR1hTdG5rcDdmQkFhS2ZYVHB2WjYxc2dNZE14SEIyOGFjRwpWNXJYaitiL3pITmRTWDRzZWpKQTE1ZWQzbkV1TGJZa1d4ZzBVcE5qWEdRcktnT3crWTFOb2lxWmtLbVp0NWVuCkdFdGhBb0dCQUpYaVVJN25IM2JodERBZFdRT2RscDNnYkhrVG9iRTdvL2hJT3pDUmtxOWl0QnJOazYwWHI3ZmcKMG5vdkp6TEpEWTQ4V3pQTjJvTlU4WElkU2Q4Zng1eGhiZEd2d3JGWVNiRTdhQTROUXNta3B5MTNIZXN5bFo4LwpvQTlqRFRlS1dBZlN0REtIM0Nac2Q3dkJCOUN5SEk0Qjk4dHg4cTZRQ1huNXpTOU5zR203Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRSWp6dlNzbVBWMnBXM0pvd0VLRmhUekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalV3TnpJek1URTBNekF3V2hjTk1qWXdOekl6TVRFMApNekF3V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1VHYW03OVVOcVBBUHdjcFJYWW43RFlsbk9SMVNRRm1pWEpvRW12bzdJd3Z3THFWSWEKYmhsdmFzQzJNNElXVXdWQm04UUZ4S1dkdmMyclUyRzBCd3NUSmRzMHR6TGFKNGlhWURNTXFoVFh2Tm1GWU10ZgpiQTFveWljVWlaVjVtbUV1cS9KSk82R29CMWJUUmVQb3hjN1Z4VHNHbTBjVGNGTURjRjNVUEt0aGtBZkIwQWtCCkIwdmViWlE5eW82UitQRDAwUldBL1hLc3Y1S2xrdU93YXg4R3JhV1c5ZThTc3A1S1doOHE5b3prY0s3bmkxREcKbzFQVk1mM3JzdzhFOHV6ZlFYT0ZOdWZrcG1ZZ01kZCtCUjRUb2ZFdW1mTzZDVVh1SndLZGtnT2c4YzFtLytRcgpJZkVLVE9CMkdRMUdoeHI4SDZoSUpYQ1pjb2RqTGJNKzJNYm5BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVROS9pS0hyamZkTnBCd2JGMmJ4Y2VPaTYvZjR3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFDMmxsa3h1MzM0UEx5Q25zSTRLSDMwd1gvSFBPaWluMklheFdZTk81TEp2cFNMQUhQNzNvMVd3CmZ1Y0xCVjJqODF3cHVkNTBjNmFoSUZZRGZUb2RwZERraE5ublFEdEQzeEx4OFNadDFBZDlkRWl2aFByNFBhWmYKSEFBWlovWWdZZWQvdnNIOWhQVExsMU44WEhmeURBQzQyWnNoNFE5c1FFT0UwdkY2VUh1SXl6T1FhdXIwSlR0Vgp1UndXT2xnWTBvU3RZRVhYdHhRNVU0MGtpZUQzVkZ0TFM3c1R0Rm54UFAveUFDU0lTb0RnMldYWkdRUUUrN2VsCmV3ZzZ5eGhHc0xZMEFkeVBpZFl4U3JTUmMvbXV2WTFlRXIxcFZYSnZvQ2JFSlgxbnZTZ0JJVTdJOENmakh4U1QKWXZkTngwemZudTdnbkY3WlFncm15MFVIOEdwNDJYbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/charts/harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prod-harbor-jobservice"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: Opaque
data:
  JOBSERVICE_SECRET: "cndJUnJIVmJoa1Rqa2VVdA=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/charts/harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prod-harbor-registry"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "N0g4V2NkYkcwODIyUzFkbw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/charts/harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prod-harbor-registry-htpasswd"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJHVWNk5FemZRM2tQTjQ1SDhFRk5POC5WTmlVMGZxS0dmenc4ejczRGFadzZsQ2tTbjdwLzB5"
---
# Source: harbor/charts/harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prod-harbor-registryctl"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: Opaque
data:
---
# Source: harbor/charts/harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prod-harbor-trivy
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9yZWRpcy5oYXJib3Iuc3ZjLmNsdXN0ZXIubG9jYWw6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/charts/harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prod-harbor-core
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "postgres.harbor.svc.cluster.local"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "harbor"
  POSTGRESQL_DATABASE: "harbor"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://oci.tjth.co"
  CORE_URL: "http://prod-harbor-core:80"
  JOBSERVICE_URL: "http://prod-harbor-jobservice"
  REGISTRY_URL: "http://prod-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://prod-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://prod-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://redis.harbor.svc.cluster.local:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://redis.harbor.svc.cluster.local:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://prod-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://prod-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "prod-harbor-core,prod-harbor-jobservice,prod-harbor-database,prod-harbor-registry,prod-harbor-portal,prod-harbor-trivy,prod-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/charts/harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "prod-harbor-jobservice-env"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
data:
  CORE_URL: "http://prod-harbor-core:80"
  TOKEN_SERVICE_URL: "http://prod-harbor-core:80/service/token"
  REGISTRY_URL: "http://prod-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://prod-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"

  LOG_LEVEL: "info"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "prod-harbor-core,prod-harbor-jobservice,prod-harbor-database,prod-harbor-registry,prod-harbor-portal,prod-harbor-trivy,prod-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/charts/harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "prod-harbor-jobservice"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://redis.harbor.svc.cluster.local:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/charts/harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "prod-harbor-portal"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/charts/harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "prod-harbor-registry"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: redis.harbor.svc.cluster.local:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      enableTLS: false
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/charts/harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "prod-harbor-registryctl"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
data:
---
# Source: harbor/charts/harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: prod-harbor-jobservice
  namespace: "harbor"
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: jobservice
    app.kubernetes.io/component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/charts/harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: prod-harbor-registry
  namespace: "harbor"
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: registry
    app.kubernetes.io/component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/charts/helm/templates/nfs.yaml
# NFS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-storage-nfs
  namespace: harbor
  labels:
    app: db-storage-nfs
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs-client
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/charts/helm/templates/nfs.yaml
# NFS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-storage-nfs
  namespace: harbor
  labels:
    app: redis-storage-nfs
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs-client
  resources:
    requests:
      storage: 100Mi
---
# Source: harbor/charts/harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: prod-harbor-core
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: prod
    app: "harbor"
    component: core
---
# Source: harbor/charts/harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "prod-harbor-jobservice"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: prod
    app: "harbor"
    component: jobservice
---
# Source: harbor/charts/harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "prod-harbor-portal"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: prod
    app: "harbor"
    component: portal
---
# Source: harbor/charts/harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "prod-harbor-registry"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: prod
    app: "harbor"
    component: registry
---
# Source: harbor/charts/harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "prod-harbor-trivy"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: prod
    app: "harbor"
    component: trivy
---
# Source: harbor/charts/helm/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: harbor
  labels:
    app: postgres
  
spec:
  type: ClusterIP
  
  ports:
    
    - port: 5432
      protocol: TCP
      name: postgres
      targetPort: 5432
    
  
  selector:
      
      app: db
---
# Source: harbor/charts/helm/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: harbor
  labels:
    app: redis
  
spec:
  type: ClusterIP
  
  ports:
    
    - port: 6379
      protocol: TCP
      name: redis
      targetPort: 6379
    
  
  selector:
      
      app: redis
---
# Source: harbor/charts/harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prod-harbor-core
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: core
    app.kubernetes.io/component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: prod
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        heritage: Helm
        release: prod
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: prod
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.1"
        component: core
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: a7bed2a8c2e91ae9a06022c5a165f0fa497556e3064840568d8300d98875c705
        checksum/secret: 7a6d00ec54ae2634180995cc1ec95cbdec130c1386367f50f488e53d49c748ea
        checksum/secret-jobservice: 6d8d8730371d59cf82b3935149732a3e2e18233757d71340ce313051dd9a359f
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      imagePullSecrets:
        - name: registry-harbor
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.13.1
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "prod-harbor-core"
        - secretRef:
            name: "prod-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: prod-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: prod-harbor-jobservice
                key: JOBSERVICE_SECRET
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: database-credentials
                key: password
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: prod-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: prod-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: prod-harbor-core
      - name: ca-download
        secret:
          secretName: "prod-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/charts/harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "prod-harbor-jobservice"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: jobservice
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: prod
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: prod
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: prod
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.1"
        component: jobservice
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap: 1c6d7a871a8d11eca7c271f997ded006e1b868d6243d62d23ac34f7ebd04c984
        checksum/configmap-env: 926fe4b48624217d1fb891d7a0de61aa6c891b5bd2a1a6a995da2ab7d2e5952d
        checksum/secret: 0034d081f0c93fa530e4a39e6577385e846993d2d419bc819f66204a50cf1573
        checksum/secret-core: c70056d9792d29197d9947d234c9acf02005ee2ae9b2c6ce779177b5c8b07598
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      imagePullSecrets:
        - name: registry-harbor
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.13.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: prod-harbor-core
                key: secret
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - configMapRef:
            name: "prod-harbor-jobservice-env"
        - secretRef:
            name: "prod-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "prod-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: prod-harbor-jobservice
---
# Source: harbor/charts/harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "prod-harbor-portal"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: portal
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: prod
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        heritage: Helm
        release: prod
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: prod
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.1"
        component: portal
        app.kubernetes.io/component: portal
      annotations:
        checksum/configmap: 38819e03e83ae4bb83145f8713b7b9587201ec2c3475a698b24eed1f19def8a0
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      imagePullSecrets:
        - name: registry-harbor
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.13.1
        imagePullPolicy: IfNotPresent
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "prod-harbor-portal"
---
# Source: harbor/charts/harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "prod-harbor-registry"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: registry
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: prod
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: prod
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: prod
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.1"
        component: registry
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: f2e0da0e00204c5f88a1deab1b6193712e75bf373070f762ca14bdfa306abe55
        checksum/secret: 955627a72fa8580e6c84872114d873321310528b5901af9db7d24fc835452648
        checksum/secret-jobservice: cd1f718ca0ef413673057cbaab12d73f29f4b21022e3c697cad1d0e685d26ce9
        checksum/secret-core: f1d8fdbea885561228613a764d02f70074bd0188c20f646fdc1e7153a6eefd41
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      imagePullSecrets:
        - name: registry-harbor
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.13.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - secretRef:
            name: "prod-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.13.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        envFrom:
        - configMapRef:
            name: "prod-harbor-registryctl"
        - secretRef:
            name: "prod-harbor-registry"
        - secretRef:
            name: "prod-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: prod-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: prod-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: prod-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "prod-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: prod-harbor-registry
---
# Source: harbor/charts/helm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: harbor
  labels:
    app: db
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      imagePullSecrets:
        - name: registry-harbor-dockerconfigjson
      serviceAccountName: 
      containers:
        - name: db
          image: postgres:17.5
          
          
          
          
          imagePullPolicy: Always
          ports:
          
            - containerPort: 5432
              protocol: TCP
              name: db
          
          
          
          resources:
            requests:
              cpu: 50m
              memory: 100M
            limits:
              cpu: 150m
              memory: 200M
          
          env:
              
              - name: PGDATA
                value: "/var/lib/postgresql/data/harbor"
              
              
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                      name: database-credentials
                      key: POSTGRES_PASSWORD
              
              - name: POSTGRES_USER
                valueFrom:
                  secretKeyRef:
                      name: database-credentials
                      key: POSTGRES_USER
              
              - name: POSTGRES_DB
                valueFrom:
                  secretKeyRef:
                      name: database-credentials
                      key: POSTGRES_DB
              
          
          
          volumeMounts:
            
            - name: db-storage-nfs
              mountPath: /var/lib/postgresql/data
            
            
          
          
      
      volumes:
        
        - name: db-storage-nfs
          persistentVolumeClaim:
            claimName: db-storage-nfs
---
# Source: harbor/charts/helm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: harbor
  labels:
    app: redis
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      imagePullSecrets:
        - name: registry-harbor-dockerconfigjson
      serviceAccountName: 
      containers:
        - name: redis
          image: redis:7.4.4
          
          
          
          
          imagePullPolicy: Always
          ports:
          
            - containerPort: 6379
              protocol: TCP
              name: redis
          
          
          
          resources:
            requests:
              cpu: 50m
              memory: 100M
            limits:
              cpu: 150m
              memory: 200M
          
          
          volumeMounts:
            
            - name: redis-storage-nfs
              mountPath: /data
            
            
          
          
      
      volumes:
        
        - name: redis-storage-nfs
          persistentVolumeClaim:
            claimName: redis-storage-nfs
---
# Source: harbor/charts/harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prod-harbor-trivy
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
    component: trivy
    app.kubernetes.io/component: trivy
spec:
  replicas: 1
  serviceName: prod-harbor-trivy
  selector:
    matchLabels:
      release: prod
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: prod
        chart: harbor
        app: "harbor"
        app.kubernetes.io/instance: prod
        app.kubernetes.io/name: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: harbor
        app.kubernetes.io/version: "2.13.1"
        component: trivy
        app.kubernetes.io/component: trivy
      annotations:
        checksum/secret: eae7fe97d938a06c41f97d99800aee94b871ae27e138a58588a2a8c9245bc4a7
    spec:
      imagePullSecrets:
        - name: registry-harbor
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.13.1
          imagePullPolicy: IfNotPresent
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "prod-harbor-core,prod-harbor-jobservice,prod-harbor-database,prod-harbor-registry,prod-harbor-portal,prod-harbor-trivy,prod-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: prod-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: prod-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: prod-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: prod-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: prod
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/charts/harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "prod-harbor-ingress"
  namespace: "harbor"
  labels:
    heritage: Helm
    release: prod
    chart: harbor
    app: "harbor"
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: harbor
    app.kubernetes.io/version: "2.13.1"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-cloudflare
    external-dns.alpha.kubernetes.io/hostname: oci.tjth.co
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: cilium
  tls:
  - secretName: prod-harbor-ingress
    hosts:
    - oci.tjth.co
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: prod-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: prod-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: prod-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: prod-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prod-harbor-portal
            port:
              number: 80
    host: oci.tjth.co
---
# Source: harbor/charts/helm/templates/dockerSecret.yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: registry-harbor-dockerconfigjson
  namespace: harbor
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ .CONTENT   }}"
    name: registry-harbor-dockerconfigjson
  data:
  - secretKey: CONTENT
    remoteRef:
      key: container-registry/dockerconfig.json
      property: CONTENT
---
# Source: harbor/templates/docker_secret.yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: registry-harbor
  namespace: harbor
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ .CONTENT   }}"
    name: registry-harbor
  data:
  - secretKey: CONTENT
    remoteRef:
      key: container-registry/dockerconfig.json
      property: CONTENT
---
# Source: harbor/templates/secret_database.yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: harbor
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: database-credentials
  data:
  - secretKey: POSTGRES_DB 
    remoteRef: 
      key: harbor/database
      property: POSTGRES_DB
  - secretKey: POSTGRES_USER
    remoteRef: 
      key: harbor/database
      property: POSTGRES_USER
  - secretKey: POSTGRES_PASSWORD
    remoteRef: 
      key: harbor/database
      property: POSTGRES_PASSWORD
  - secretKey: POSTGRES_HOST
    remoteRef: 
      key: harbor/database
      property: POSTGRES_HOST
  - secretKey: POSTGRES_PORT
    remoteRef: 
      key: harbor/database
      property: POSTGRES_PORT
  - secretKey: password
    remoteRef: 
      key: harbor/database
      property: POSTGRES_PASSWORD
---
# Source: harbor/templates/ssh_secret.yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: backup-ssh-key
  namespace: harbor
spec:
  refreshInterval: "15s"
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: backup-ssh-key
  data:
  - secretKey: id_rsa 
    remoteRef: 
      key: backups/ssh-key
      property: id_rsa
